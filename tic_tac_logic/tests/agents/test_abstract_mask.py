from tic_tac_logic.agents.masks import (
    AbstractMaskFactory,
    MaskRules,
    CompleteMask,
)
from tic_tac_logic.constants import X, O, E


class TestRemoveNonMatching:
    def test_remove_non_matching(self) -> None:
        mask = AbstractMaskFactory(match_symbol=X, rule=MaskRules(0, 0, 0, 0))
        grid = [[X, O], [E, X]]
        assert mask.remove_non_matching(grid) == [[X, E], [E, X]]


class TestGenerateMasks:
    def test_generate_masks_horizontal(self) -> None:
        rules = MaskRules(rows_above=0, rows_below=0, columns_left=1, columns_right=1)
        base_mask = AbstractMaskFactory(match_symbol=None, rule=rules, debug=True)
        masks = base_mask.generate_masks()
        assert masks == [
            CompleteMask(
                rules=rules,
                pattern="___",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X__",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O__",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="___",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__O",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X__",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_O",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O__",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_O",
                symbol_to_place=O,
                match_symbol=None,
            ),
        ]

    def test_generate_masks_vertical(self) -> None:
        rules = MaskRules(rows_above=1, rows_below=1, columns_left=0, columns_right=0)
        base_mask = AbstractMaskFactory(match_symbol=None, rule=rules, debug=True)
        masks = base_mask.generate_masks()
        assert masks == [
            CompleteMask(
                rules=rules,
                pattern="___",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X__",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O__",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_X",
                symbol_to_place=X,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_O",
                symbol_to_place=X,
                match_symbol=None,
            ),
            #
            CompleteMask(
                rules=rules,
                pattern="___",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="__O",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X__",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="X_O",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O__",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_X",
                symbol_to_place=O,
                match_symbol=None,
            ),
            CompleteMask(
                rules=rules,
                pattern="O_O",
                symbol_to_place=O,
                match_symbol=None,
            ),
        ]
